generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stand {
  id        String   @id @default(uuid())
  name      String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  rows      Int?
  columns   Int?
  createdAt DateTime @default(now())

  standProducts StandProduct[]
  checks        Check[]
  revisions    Revision[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  barcode     String   @unique
  clientPrice Float //цена на едро
  pcd         String? //препоръчкителна цена доставчик
  quantity    Int      @default(0)
  active      Boolean  @default(true) // Product is active or discontinued
  createdAt   DateTime @default(now())

  standProducts   StandProduct[]
  checkedProducts CheckedProduct[]
  missingProducts MissingProduct[]
}

model StandProduct {
  id        String   @id @default(uuid())
  stand     Stand    @relation(fields: [standId], references: [id])
  standId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
     row       Int?
     column    Int?

     @@unique([standId, productId])
}

model Check {
  id        String   @id @default(uuid())
  stand     Stand    @relation(fields: [standId], references: [id])
  standId   String
  user      String
  createdAt DateTime @default(now())

  checkedProducts CheckedProduct[]
}

model CheckedProduct {
  id         String   @id @default(uuid())
  check      Check    @relation(fields: [checkId], references: [id])
  checkId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  status     String   // "ok", "missing", "replaced"
}

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  password       String   // хеширана с bcrypt
  role           Role     @default(USER)
  emailVerified  DateTime?
  createdAt      DateTime @default(now())

  revisions      Revision[]
  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Partner {
  id             String   @id               // Външен ID (въвежда се ръчно)
  name           String                     // Име на фирмата
  bulstat        String?                    // Булстат
  contactPerson  String?                    // Лице за контакт
  phone          String?                    // Телефон

  stores         Store[]                    // Връзка към магазини
  revisions     Revision[]
}

model Store {
  id          String   @id @default(uuid()) // Генерирано ID
  name        String?
  address     String                         // Локация (адрес)
  contact     String?                        // Лице за контакт
  phone       String?                        // Телефон
  createdAt   DateTime @default(now())

  partner     Partner  @relation(fields: [partnerId], references: [id])
  partnerId   String                          // Външният ID на фирмата

  stands      Stand[]                         // Щендери в магазина
}

model Revision {
  id         String   @id @default(uuid())
  stand      Stand    @relation(fields: [standId], references: [id])
  standId    String
  partner    Partner  @relation(fields: [partnerId], references: [id])
  partnerId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())

  missingProducts MissingProduct[]
}

model MissingProduct {
  id          String   @id @default(uuid())
  revision    Revision @relation(fields: [revisionId], references: [id])
  revisionId  String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  missingQuantity Int
}
